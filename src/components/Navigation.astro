---
import { config } from '../config';

export interface Props {
  currentSection?: string;
}

const { currentSection } = Astro.props;
const currentPath = Astro.url.pathname;
---

<nav class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8" role="navigation" aria-label="Main navigation">
  <div class="flex items-center justify-between h-16">
    <!-- Logo and Site Title -->
    <div class="flex items-center">
      <a href="/" class="flex items-center space-x-3 text-green-700 hover:text-green-800 transition-colors">
        <!-- Golf Club Logo Placeholder -->
        <svg class="h-10 w-10 animate-float" viewBox="0 0 40 40" fill="currentColor" aria-hidden="true">
          <circle cx="20" cy="20" r="18" stroke="currentColor" stroke-width="2" fill="none"/>
          <path d="M15 20 L25 20 M20 15 L20 25" stroke="currentColor" stroke-width="2"/>
        </svg>
        <div class="hidden sm:block">
          <div class="text-lg font-bold">VRA Golf Club</div>
          <div class="text-sm text-gray-600">Seniors Section</div>
        </div>
      </a>
    </div>
    
    <!-- Desktop Navigation -->
    <div class="hidden md:block">
      <div class="ml-10 flex items-baseline space-x-4">
        {config.navigation.primary.map((item) => {
          const isActive = item.href === '/' ? currentPath === '/' : currentPath.startsWith(item.href);
          const isExternal = item.href.startsWith('mailto:') || item.href.startsWith('http');
          
          return (
            <a
              href={item.href}
              class={`px-3 py-2 rounded-md text-sm font-medium transition-all duration-300 hover-scale ${
                isActive 
                  ? 'bg-green-100 text-green-700' 
                  : 'text-gray-700 hover:text-green-700 hover:bg-green-50'
              }`}
              {...(isExternal && { target: '_blank', rel: 'noopener noreferrer' })}
            >
              {item.label}
            </a>
          );
        })}
      </div>
    </div>
    
    <!-- Search and Mobile Menu Button -->
    <div class="flex items-center space-x-4">
      <!-- Search Button -->
      <button
        id="search-button"
        type="button"
        class="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 rounded-md p-2"
        aria-label="Search"
      >
        <svg class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
      </button>
      
      <!-- Mobile menu button -->
      <button
        id="mobile-menu-button"
        type="button"
        class="md:hidden text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 rounded-md p-2"
        aria-expanded="false"
        aria-label="Toggle navigation menu"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
        </svg>
      </button>
    </div>
  </div>
  
  <!-- Mobile Navigation Menu -->
  <div id="mobile-menu" class="md:hidden hidden">
    <div class="px-2 pt-2 pb-3 space-y-1 sm:px-3 bg-white border-t border-gray-200">
      {config.navigation.primary.map((item) => {
        const isActive = item.href === '/' ? currentPath === '/' : currentPath.startsWith(item.href);
        const isExternal = item.href.startsWith('mailto:') || item.href.startsWith('http');
        
        return (
          <a
            href={item.href}
            class={`block px-3 py-2 rounded-md text-base font-medium transition-all duration-300 hover-scale ${
              isActive 
                ? 'bg-green-100 text-green-700' 
                : 'text-gray-700 hover:text-green-700 hover:bg-green-50'
            }`}
            {...(isExternal && { target: '_blank', rel: 'noopener noreferrer' })}
          >
            {item.label}
          </a>
        );
      })}
    </div>
  </div>
</nav>

<script>
  // Mobile menu toggle
  document.addEventListener('DOMContentLoaded', () => {
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
      mobileMenuButton.addEventListener('click', () => {
        const isHidden = mobileMenu.classList.contains('hidden');
        if (isHidden) {
          mobileMenu.classList.remove('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'true');
        } else {
          mobileMenu.classList.add('hidden');
          mobileMenuButton.setAttribute('aria-expanded', 'false');
        }
      });
    }
  });
</script>