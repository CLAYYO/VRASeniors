---
import type { ContentItem } from '../config';

export interface Props {
  section: string;
  sectionContent: ContentItem[];
  currentSlug?: string;
}

const { section, sectionContent, currentSlug } = Astro.props;

const sectionTitle = section.charAt(0).toUpperCase() + section.slice(1);
---

<!-- Section Navigation -->
<div class="bg-white/95 backdrop-blur-sm border-b border-gray-200 sticky top-16 z-20">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <!-- Mobile Dropdown -->
    <div class="sm:hidden py-4">
      <div class="relative">
        <button
          id="section-nav-toggle"
          type="button"
          class="flex items-center justify-between w-full px-4 py-3 text-left text-gray-700 bg-white rounded-lg shadow-sm border border-gray-200 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
          aria-expanded="false"
          aria-haspopup="true"
        >
          <span class="font-medium">{sectionTitle} Navigation</span>
          <svg class="w-5 h-5 transition-transform duration-200" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
          </svg>
        </button>
        
        <div
          id="section-nav-dropdown"
          class="absolute top-full left-0 right-0 mt-2 bg-white rounded-lg shadow-lg border border-gray-200 hidden z-30"
        >
          <div class="py-2 max-h-64 overflow-y-auto">
            {sectionContent.map((item) => {
              const isActive = currentSlug === item.slug;
              const cleanTitle = item.title
                .replace('Portfolio – ', '')
                .replace('Administration – ', '')
                .replace('Golf – ', '');
              
              return (
                <a
                  href={`/${section}/${item.slug}`}
                  class={`block px-4 py-3 text-sm transition-colors ${
                    isActive
                      ? 'bg-blue-50 text-blue-700 font-medium border-r-2 border-blue-500'
                      : 'text-gray-700 hover:bg-gray-50 hover:text-blue-600'
                  }`}
                  {...(isActive && { 'aria-current': 'page' })}
                >
                  {cleanTitle}
                  {item.pdfs && item.pdfs.length > 0 && (
                    <span class="ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                      {item.pdfs.length} PDF{item.pdfs.length > 1 ? 's' : ''}
                    </span>
                  )}
                </a>
              );
            })}
          </div>
        </div>
      </div>
    </div>

    <!-- Desktop Horizontal Navigation -->
    <div class="hidden sm:block">
      <div class="py-4">
        <h2 class="text-lg font-semibold text-gray-900 mb-4">{sectionTitle}</h2>
        <div class="flex flex-wrap gap-2">
          {sectionContent.map((item) => {
            const isActive = currentSlug === item.slug;
            const cleanTitle = item.title
              .replace('Portfolio – ', '')
              .replace('Administration – ', '')
              .replace('Golf – ', '');
            
            return (
              <a
                href={`/${section}/${item.slug}`}
                class={`inline-flex items-center px-4 py-2 rounded-lg text-sm font-medium transition-all duration-200 ${
                  isActive
                    ? 'bg-blue-600 text-white shadow-md'
                    : 'bg-white text-gray-700 border border-gray-200 hover:bg-blue-50 hover:text-blue-600 hover:border-blue-300 shadow-sm'
                }`}
                {...(isActive && { 'aria-current': 'page' })}
              >
                {cleanTitle}
                {item.pdfs && item.pdfs.length > 0 && (
                  <span class={`ml-2 inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${
                    isActive
                      ? 'bg-blue-500 text-blue-100'
                      : 'bg-blue-100 text-blue-800'
                  }`}>
                    {item.pdfs.length}
                  </span>
                )}
              </a>
            );
          })}
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Quick Links Section -->
<div class="bg-gray-50/80 backdrop-blur-sm border-b border-gray-200">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-3">
    <div class="flex flex-wrap items-center gap-4 text-sm">
      <span class="font-medium text-gray-700">Quick Links:</span>
      <a href="/hall-of-fame" class="inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors">
        <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
        </svg>
        Hall of Fame
      </a>
      <a href="/contact" class="inline-flex items-center text-blue-600 hover:text-blue-700 transition-colors">
        <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
        </svg>
        Contact
      </a>
      <a href="/" class="inline-flex items-center text-gray-500 hover:text-gray-700 transition-colors">
        <svg class="w-4 h-4 mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="10 19l-7-7m0 0l7-7m-7 7h18" />
        </svg>
        Home
      </a>
    </div>
  </div>
</div>

<script>
  // Mobile dropdown toggle functionality
  document.addEventListener('DOMContentLoaded', () => {
    const toggle = document.getElementById('section-nav-toggle');
    const dropdown = document.getElementById('section-nav-dropdown');
    const toggleIcon = toggle?.querySelector('svg');
    
    if (toggle && dropdown && toggleIcon) {
      toggle.addEventListener('click', () => {
        const isHidden = dropdown.classList.contains('hidden');
        
        if (isHidden) {
          dropdown.classList.remove('hidden');
          toggle.setAttribute('aria-expanded', 'true');
          toggleIcon.style.transform = 'rotate(180deg)';
        } else {
          dropdown.classList.add('hidden');
          toggle.setAttribute('aria-expanded', 'false');
          toggleIcon.style.transform = 'rotate(0deg)';
        }
      });
      
      // Close dropdown when clicking outside
      document.addEventListener('click', (e) => {
        if (!toggle.contains(e.target) && !dropdown.contains(e.target)) {
          dropdown.classList.add('hidden');
          toggle.setAttribute('aria-expanded', 'false');
          toggleIcon.style.transform = 'rotate(0deg)';
        }
      });
    }
  });
</script>