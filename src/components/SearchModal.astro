---
// Search Modal Component
import { getAllContent } from '../utils/data';

// Get all content for search
const allContent = getAllContent();
---

<div id="search-modal" class="hidden fixed inset-0 bg-black bg-opacity-50 z-50 flex items-start justify-center pt-16 px-4">
  <div class="bg-white rounded-lg w-full max-w-2xl max-h-[80vh] overflow-hidden shadow-xl">
    <!-- Search Header -->
    <div class="flex items-center justify-between p-4 border-b border-gray-200">
      <h2 class="text-lg font-semibold text-gray-900">Search</h2>
      <button
        id="close-search"
        type="button"
        class="text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-green-500 rounded-md p-1"
        aria-label="Close search"
      >
        <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <!-- Search Input -->
    <div class="p-4">
      <div class="relative">
        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
          <svg class="h-5 w-5 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <input
          id="search-input"
          type="text"
          placeholder="Search pages, documents, and content..."
          class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-green-500 focus:border-green-500"
          autocomplete="off"
        />
      </div>
    </div>
    
    <!-- Search Results -->
    <div id="search-results" class="max-h-96 overflow-y-auto">
      <!-- Results will be populated by JavaScript -->
      <div id="search-empty" class="p-4 text-center text-gray-500">
        <p>Start typing to search...</p>
      </div>
    </div>
  </div>
</div>

<script define:vars={{ allContent }}>
  // Search functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    const searchEmpty = document.getElementById('search-empty');
    
    if (!searchInput || !searchResults || !searchEmpty) return;
    
    // Use the content data passed from Astro
    const searchData = allContent;
    
    // Debounce function
    function debounce(func, wait) {
      let timeout;
      return function executedFunction(...args) {
        const later = () => {
          clearTimeout(timeout);
          func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
      };
    }
    
    // Search function
    function performSearch(query) {
      if (!searchResults) return;
      
      if (!query.trim()) {
        searchResults.innerHTML = '<div id="search-empty" class="p-4 text-center text-gray-500"><p>Start typing to search...</p></div>';
        return;
      }
      
      const searchTerm = query.toLowerCase();
      const results = searchData.filter(item => {
        const searchableText = [
          item.title,
          item.content,
          ...(item.pdfs?.map(pdf => pdf.name) || [])
        ].join(' ').toLowerCase();
        
        return searchableText.includes(searchTerm);
      });
      
      if (results.length === 0) {
        searchResults.innerHTML = `
          <div class="p-4 text-center text-gray-500">
            <p>No results found for "${query}"</p>
          </div>
        `;
        return;
      }
      
      // Group results by section
      const groupedResults = {};
      results.forEach(item => {
        const section = getSectionFromPage(item.page) || 'other';
        if (!groupedResults[section]) {
          groupedResults[section] = [];
        }
        groupedResults[section].push(item);
      });
      
      let resultsHTML = '';
      Object.entries(groupedResults).forEach(([section, items]) => {
        const sectionTitle = section.charAt(0).toUpperCase() + section.slice(1);
        resultsHTML += `
          <div class="border-b border-gray-200 last:border-b-0">
            <div class="p-3 bg-gray-50 text-sm font-medium text-gray-700">${sectionTitle}</div>
            <div class="divide-y divide-gray-100">
        `;
        
        items.forEach(item => {
          const url = section === 'other' ? '/' : `/${section}/${item.slug}`;
          const snippet = item.content.substring(0, 150) + (item.content.length > 150 ? '...' : '');
          
          resultsHTML += `
            <a href="${url}" class="block p-4 hover:bg-gray-50 transition-colors">
              <div class="font-medium text-gray-900">${item.title}</div>
              <div class="text-sm text-gray-600 mt-1">${snippet}</div>
              ${item.pdfs && item.pdfs.length > 0 ? `
                <div class="text-xs text-green-600 mt-2">
                  ${item.pdfs.length} document${item.pdfs.length > 1 ? 's' : ''} available
                </div>
              ` : ''}
            </a>
          `;
        });
        
        resultsHTML += '</div></div>';
      });
      
      if (searchResults) {
        searchResults.innerHTML = resultsHTML;
      }
    }
    
    // Helper function to determine section from page
    function getSectionFromPage(page) {
      const sectionMappings = {
        golf: [
          'weekly_competitions', 'matches', 'knockouts', 'exchange_days',
          'rider_cup', 'friendlies', 'whs', 'whs_conversion_tables'
        ],
        portfolio: [
          'introduction', 'seniors_benefits', 'operating_guidelines', 'committee_structure',
          'inter_club_matches_portfolio', 'seniors_competitions', 'financial_operation',
          'seniors_invitation', 'hall_of_fame'
        ],
        administration: [
          'vra_constitution', 'document_tracker', 'prize_structure',
          'annual_meeting_minutes', 'photo_gallery'
        ]
      };
      
      return Object.keys(sectionMappings).find(section => 
        sectionMappings[section].includes(page)
      );
    }
    
    // Debounced search
    const debouncedSearch = debounce(performSearch, 300);
    
    // Search input event listener
    searchInput.addEventListener('input', (e) => {
      debouncedSearch(e.target.value);
    });
    
    // Handle enter key
    searchInput.addEventListener('keydown', (e) => {
      if (e.key === 'Enter') {
        e.preventDefault();
        const firstResult = searchResults.querySelector('a');
        if (firstResult) {
          firstResult.click();
        }
      }
    });
  });
</script>